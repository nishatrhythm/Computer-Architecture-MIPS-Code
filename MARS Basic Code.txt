# Dividing integers (Another way)

.data
	
.text
	addi $t0, $zero, 30
	
	div $s0, $t0, 10
	
	li $v0, 1
	add $a0, $zero, $s0
	syscall


# Dividing integers

.data
	
.text
	addi $t0, $zero, 30
	addi $t1, $zero, 5
	
	div $s0, $t0, $t1
	
	li $v0, 1
	add $a0, $zero, $s0
	syscall


# Multiplicating integers using sll (shift left logical)

.data
	
.text
	addi $s0, $zero, 4
	
	sll $t0, $s0, 3		# 2^i, here i = 3
	
	li $v0, 1
	add $a0, $zero, $t0
	syscall


# Multiplicating integers using mult:

.data
	
.text
	addi $t0, $zero, 2000
	addi $t1, $zero, 10
	
	mult $t0, $t1
	
	mflo $s0
	
	li $v0, 1
	add $a0, $zero, $s0
	syscall


# Multiplicating integers using mul:

.data
	
.text
	addi $s0, $zero, 15
	addi $s1, $zero, 3
	
	mul $t0, $s0, $s1
	
	
	li $v0, 1
	add $a0, $zero, $t0
	syscall


# Subtracting integers:

.data
	number1: .word 25
	number2: .word 15
	
.text
	lw $s0, number1		#s0 = 25
	lw $s1, number2		#s1 = 15
	
	sub $t0, $s0, $s1	# t0 = s0 - s1
	li $v0, 1
	move $a0, $t0
	
	syscall


# Adding two integers:

.data
	number1: .word 5
	number2: .word 10
	
.text
	lw $t0, number1($zero)
	lw $t1, number2($zero)
	
	add $t2, $t0, $t1	# t2 = t0 + t1
	
	li $v0, 1
	add $a0, $zero, $t2
	syscall


# Printing a double:

.data
	myDouble: .double 7.202
	zeroDouble: .double 0.0
	
.text
	ldc1 $f2, myDouble
	ldc1 $f0, zeroDouble
	
	li $v0, 3
	add.d $f12, $f2, $f0
	syscall


# Printing a float:

.data
	PI: .float 3.1416
	
.text
	li $v0, 2
	lwc1 $f12, PI
	syscall


# Printing an integer:

.data
	age: .word 23	#This is a word or integer
	
.text
	#Prints an integer to the screen	
	li $v0, 1
	lw $a0, age
	syscall


# Printing a character:

.data
	myCharacter: .byte 'a'
	
.text
	li $v0, 4
	la $a0, myCharacter
	syscall


# Printing a string:

.data
	myMessage: .asciiz "Hello Assembly!\n"
	
.text
	li $v0, 4
	la $a0, myMessage
	syscall